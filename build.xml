<?xml version="1.0" encoding="UTF-8"?>
<project name="mispi3" default="build" xmlns:ivy="antlib:org.apache.ivy.ant">
    <property file="build.properties"/>

    <path id="classpath.source">
        <fileset dir="${lib}">
            <include name="*.jar"/>
        </fileset>
    </path>
    <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="lib/ant-contrib.jar"/>
    <property name="ant-classlib" value="C:\MSP_lab3\mispi\lab3\lib\xalan.jar"/>

    <target name="resolve" description="resolve dependencies with ivy">
        <mkdir dir="${lib}"/>
        <ivy:retrieve pattern="lib/[artifact].[ext]" conf="jars"/>
    </target>

    <!-- <taskdef name="xpath" classname="org.apache.tools.ant.taskdefs.XPath" /> -->
    <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask">
        <classpath refid="classpath.source"/>
    </taskdef>

    <target name="copy">
        <copy todir="${svn}">
            <fileset dir="${basedir}">
                <include name="**/*"/>
            </fileset>
        </copy>
        <echo message="Copied"/>
    </target>

    <!-- Определяем цель svn-add -->

    <target name="svn-add">
        <!-- Выполняем команду svn add -->
        <exec executable="svn">
            <arg value="add"/>
            <arg value="${svn}\*"/>
        </exec>
        <echo message="Added"/>
    </target>

    <target name="svn-commit">
        <!-- Запрашиваем у пользователя сообщение для коммита -->
        <input message="Input commit message: " addproperty="commit.message"/>

        <!-- Выполняем команду svn commit -->
        <exec executable="svn">
            <arg value="commit"/>
            <arg value="-m"/>
            <arg value="${commit.message}"/>
            <arg value="${svn}"/>
        </exec>
        <echo message="Commited"/>
    </target>

    <target name="svn-switch" description="Switch SVN repository URL for a local working copy">
        <exec executable="svn">
            <arg line="switch"/>
            <arg value="${svn.url}"/>
            <arg value="${svn}"/>
        </exec>
    </target>

    <target name="svn-checkout" description="Checkout project from SVN repository">
        <property name="svn.url" value="${svn.url}"/>
        <property name="svn.dir" value="${svn}"/>

        <exec executable="cmd" dir="${basedir}" failonerror="true">
            <arg value="/c"/>
            <arg value="svn"/>
            <arg value="checkout"/>
            <arg value="${svn.url}"/>
            <arg value="${svn.dir}"/>
        </exec>
    </target>

    <target name="diff-file">
        <property name="modified.files" value="${modified.files}${line.separator}${modified.file}" />
    </target>

    <target name="copy-back" depends="history">
        <copy todir="${basedir}">
            <fileset dir="${svn}">
                <include name="**/*"/>
            </fileset>
        </copy>
        <echo message="Copied back"/>
    </target>

    <target name="compile_before">
        <mkdir dir="${compiled.classes}"/>
        <mkdir dir="${compiled.tests}"/>

        <javac destdir="${compiled.classes}" includeantruntime="false">
            <src path="${main}"/>
            <classpath refid="classpath.source"/>
        </javac>

        <javac destdir="${compiled.tests}" includeantruntime="false">
            <src path="${tests}"/>
            <classpath>
                <pathelement location="${compiled.classes}"/>
                <path refid="classpath.source"/>
            </classpath>
        </javac>

        <condition property="compile.failed">
                <and>
                    <available file="${compiled.classes}"/>
                    <available file="${compiled.tests}"/>
                </and>
        </condition>
    </target>

    <target name="compile" depends="compile_before" description="compilation project">
    </target>

    <target name="build" depends="compile" description="building project">
        <jar destfile="${destination.jar}" basedir="${compiled.classes}">
            <manifest>
                <attribute name="Main-Class" value="${main.class}"/>
            </manifest>
        </jar>
    </target>

    <target name="clean" description="cleaning">
        <delete dir="${compiled}"/>
    </target>

    <target name="test" depends="build" description="junit test income">
        <mkdir dir="${report}"/>
        <junitlauncher printsummary="true">
            <classpath>
                <pathelement location="${compiled.tests}"/>
                <pathelement location="${compiled.classes}"/>
                <path refid="classpath.source"/>
            </classpath>
            <testclasses outputdir="${report}">
                <fileset dir="${compiled.tests}"/>
            </testclasses>
            <listener type="legacy-xml" sendSysErr="true" sendSysOut="true"/>
        </junitlauncher>
    </target>

    <target name="native2ascii" description="native2ascii">
        <native2ascii src="${main.resources}" dest="${native2ascii}" includes="**/*.properties"/>
    </target>

    <property name="revisionsList" value=""/>

    <target name="list-revisions">
        <!-- сохраняем вывод команды SVN в переменной -->
        <exec executable="svn" output="revisions.txt">
            <arg value="log"/>
            <arg value="${svn}"/>
            <arg value="-r"/>
            <arg value="1:HEAD"/>
        </exec>
        <loadfile property="revisionsList" srcFile="revisions.txt" encoding="UTF-8" />
        <echo encoding="windows-1251">${revisionsList}</echo>
    </target>

    <target name="history-one" depends="list-revisions">
        <!-- Проверяем результаты компиляции -->
        <condition property="compilation.failed">
                <and>
                    <available file="${compiled.classes}"/>
                    <available file="${compiled.tests}"/>
                </and>
        </condition>

        <echo>${revisionsList}</echo>
        <!-- разбиваем список ревизий на отдельные значения -->
        <propertyregex property="revisions" input="${revisionsList}" regexp="r[0-9]+" select="\0" global="true" />
        <!-- обрабатываем каждую ревизию в цикле -->
        <foreach list="${revisions}" target="process-revision" param="revision"/>
    </target>

    <target name="process-revision">
        <!-- здесь вы можете обрабатывать каждую ревизию, передавая ее в параметре 'revision' -->
        <echo>Processing revision ${revision}</echo>
        <antcall target="svn-update">
            <param name="revision" value="${revision}" />
        </antcall>
    </target>

    <target name="svn-update">
        <echo>Updating to revision ${revision}...</echo>
        <exec executable="svn" failonerror="true">
            <arg value="update" />
            <arg value="-r" />
            <arg value="${revision}" />
            <arg value="-q" /> <!-- опция, чтобы уменьшить вывод команды -->
            <arg value="${svn}" />
        </exec>
    </target>

    <target name="history" depends="compile" description="Rollback changes on failed compilation">

        <!-- Проверяем результаты компиляции -->
        <condition property="compilation.failed">
            <not>
                <and>
                    <available file="${compiled.classes}"/>
                    <available file="${compiled.tests}"/>
                </and>
            </not>
        </condition>

        <antcall target="list-revisions" />

        <!-- Если компиляция не удалась, откатываем изменения -->
        <fail message="Compilation failed.">
            <condition>
                <contains string="${compilation.failed}" substring="true"/>
            </condition>
        </fail>

        <!--dir="${svn} -->
        <exec executable="svn">
            <arg value="revert"/>
            <arg value="-R"/>
            <arg value="${svn}"/>
        </exec>
    </target>
</project>